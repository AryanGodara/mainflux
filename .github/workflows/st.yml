name: Test OpenAPI using Schemathesis

on: [push, pull_request] 

env:
  MF_TOKEN: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzM5MTgxNjUsImlhdCI6MTY3Mzg4MjE2NSwiaXNzIjoibWFpbmZsdXguYXV0aCIsInN1YiI6ImV4YW1wbGVAZWcuY29tIiwiaXNzdWVyX2lkIjoiNzE0NTk5MmYtMzZkZi00NjE5LWE1YzQtOGJkMzg2YjI3YmE5IiwidHlwZSI6MH0.W7Ra3ChV0PPfTTJGJX4hAW_1Gq2zK0RR9qJJm3sk5tw'

jobs:
  api-tests:
    runs-on: ubuntu-20.04
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      
      - name: run containers
        run: make endtoend
      
      
      # Auth.yml
      - name: Run st for auth.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/auth.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Bootstrap.yml
      - name: Run st for bootstrap.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/bootstrap.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}
        
      # Certs.yml
      - name: Run st for certs.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/certs.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Consumers-notifiers.yml
      - name: Run st for consumers-notifiers.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/consumers-notifiers.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}
      
      # Http.yml
      - name: Run st for http.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/http.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Provision.yml
      - name: Run st for provision.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/provision.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Readers.yml
      - name: Run st for readers.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/readers.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Things.yml
      - name: Run st for things.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/things.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Twins.yml
      - name: Run st for twins.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/twins.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Users.yml
      - name: Run st for users.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/users.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}

      # Websocket.yml
      - name: Run st for websocket.yml
        if: always()
        uses: schemathesis/action@v1
        with:
          # API schema location
          schema: './api/openapi/websocket.yml'
          base-url: 'http://localhost'
          args: -H Authorization:${{ env.MF_TOKEN }}
          # Set your token from secrets
          token: ${{ secrets.SCHEMATHESIS_TOKEN }}


      - name: Stop the running docker containers
        if: always()
        run: make composedown 